---
alwaysApply: true
description: 코드 수정 이후 TODO.md 업데이트 및 git 반영 워크플로우를 강제하는 규칙
---

## Post-Edit Workflow (TODO 업데이트 + Git 커밋)

- 적용 범위: 워크스페이스 전체 변경사항.
- 목표: 코드 수정 직후 [TODO.md](mdc:TODO.md)를 최신화하고, 변경분을 Git에 커밋(필요 시 푸시)한다.

### 1) TODO.md 업데이트 규칙
- 관련 변경이 끝나면 즉시 [TODO.md](mdc:TODO.md)를 업데이트한다.
- 기존 항목은 진행 상태를 반영한다: 완료는 `[x]`, 진행/대기 상태는 그대로 유지.
- 계획에 없던 변경이라도 간단한 한 줄 요약으로 새 체크박스를 추가한다.
  - 형식(예): `- [x] 파일/모듈: 변경 요약` 또는 해당 섹션 하위에 한 줄로 추가
- 파일/모듈을 언급할 때는 `[경로/파일명](mdc:경로/파일명)` 링크 표기를 사용한다.
- 가능한 한 한국어의 간결한 동사형 문장으로 작성한다.

### 2) Git 반영 규칙 (커밋/푸시)
- 변경을 스테이징하고 커밋한다. 커밋 메시지는 Conventional Commits를 따른다.
  - 메시지 형식: `<type>(<scope>): <subject>`
  - 타입 예시: `feat`, `fix`, `refactor`, `docs`, `chore`, `test` 등
  - 예시:
    - `feat(live_trader_gpt): enable live orders; update TODO`
    - `chore(todo): update TODO after ATR strategy edits`
- 명령 예시:
```bash
git add -A
git commit -m "<type>(<scope>): <subject>"
```
- 원격 반영이 필요한 경우(사용자가 원하면)만 푸시한다. 로컬 충돌 가능성이 있으면 먼저 리베이스 풀을 수행한다.
```bash
git pull --rebase --autostash | cat
git push
```

### 3) 품질 가드(선택)
- 커밋 전에 빠르게 품질 검사를 실행할 수 있다.
```bash
uv run ruff check .
uv run pytest -q
```

### 4) 실행 방법
- 명령은 비대화형으로 제안/실행한다. 출력이 길어질 수 있는 명령에는 `| cat`을 덧붙인다.
- 장시간 실행/지속 실행 작업은 백그라운드로 실행한다.
- 실패/충돌 시에는 상황을 간단히 요약하고 다음 조치를 제안한다(예: 리베이스 충돌 해결, 커밋 메시지 정정 등).